// AWS Integration for Desi Cloud Job Title Generator
// This file contains functions to integrate with AWS Bedrock for AI-powered job title generation

// AWS SDK Configuration
// Note: In production, use proper authentication methods like IAM roles or AWS Cognito
const AWS_CONFIG = {
    region: 'us-east-1', // Change to your preferred region
    // Add your AWS credentials configuration here
    // For security, use environment variables or AWS IAM roles in production
};

// Bedrock model configuration
const BEDROCK_CONFIG = {
    modelId: 'anthropic.claude-3-haiku-20240307-v1:0', // Using Claude 3 Haiku for cost-effectiveness
    maxTokens: 500,
    temperature: 0.8, // Higher temperature for more creative outputs
};

/**
 * Generate job title using AWS Bedrock
 * @param {Object} userData - User input data
 * @returns {Promise<Object>} Generated job title and description
 */
async function generateJobTitleWithBedrock(userData) {
    const prompt = createPrompt(userData);
    
    try {
        // This would be the actual AWS Bedrock API call
        // For now, we'll use a mock implementation
        const response = await callBedrockAPI(prompt);
        return parseBedrockResponse(response);
    } catch (error) {
        console.error('Error calling Bedrock API:', error);
        // Fallback to local generation
        return generateJobTitle(userData);
    }
}

/**
 * Create a structured prompt for the AI model
 * @param {Object} userData - User input data
 * @returns {string} Formatted prompt
 */
function createPrompt(userData) {
    return `You are a creative AI career coach for Indian techies. Given the details below, invent a unique, futuristic, and quirky cloud job title and write a playful, respectful, and desi-flavored job description (2-3 lines). Use Hinglish or Indian English, include local tech culture or pop culture references, and keep the tone positive and fun. Avoid stereotypes and ensure the description is friendly for all genders.

Inputs:
Name: ${userData.name}
Favourite cloud service or tech area: ${userData.cloudService}
Preferred work style: ${userData.workStyle}
Secret superpower or quirky skill: ${userData.superpower}

Output Format:
Job Title: [Desi, quirky, futuristic title]
Description: [2-3 lines, Hinglish or Indian English, using local references, workplace humor, and a positive, inclusive tone.]

Example:
Job Title: Data Dabbawala
Description: Ananya is the Data Dabbawala who delivers perfect queries faster than Mumbai's lunchboxes. Her teamwork and snack-finding skills keep the whole cloud crew happy and productive. Even the servers wait for her next move!

Generate a creative and unique job title now:`;
}

/**
 * Mock AWS Bedrock API call
 * In production, replace this with actual AWS SDK calls
 * @param {string} prompt - The prompt to send to the model
 * @returns {Promise<string>} Model response
 */
async function callBedrockAPI(prompt) {
    // Mock implementation - replace with actual AWS Bedrock call
    return new Promise((resolve) => {
        setTimeout(() => {
            // This would be replaced with actual Bedrock API response
            resolve(`Job Title: Cloud Computing Rockstar
Description: ${prompt.includes('Databases') ? 'Data flows through their hands like perfect biryani rice' : 'Codes with the precision of a master chef'}.`);
        }, 1500);
    });
}

/**
 * Parse the response from Bedrock API
 * @param {string} response - Raw response from Bedrock
 * @returns {Object} Parsed job title and description
 */
function parseBedrockResponse(response) {
    const lines = response.split('\n');
    let jobTitle = '';
    let description = '';
    
    for (const line of lines) {
        if (line.startsWith('Job Title:')) {
            jobTitle = line.replace('Job Title:', '').trim();
        } else if (line.startsWith('Description:')) {
            description = line.replace('Description:', '').trim();
        }
    }
    
    return {
        title: jobTitle || 'Cloud Computing Specialist',
        description: description || 'A dedicated cloud professional with amazing skills!',
        userName: 'Generated by AI'
    };
}

/**
 * Enhanced form submission with AWS integration
 * Replace the existing form handler in script.js with this
 */
async function handleFormSubmissionWithAWS(formData) {
    const userData = {
        name: formData.get('userName'),
        cloudService: formData.get('cloudService'),
        workStyle: formData.get('workStyle'),
        superpower: formData.get('superpower')
    };
    
    showLoading();
    
    try {
        // Try AWS Bedrock first
        const result = await generateJobTitleWithBedrock(userData);
        showResult(result);
    } catch (error) {
        console.error('AWS integration failed, using local generation:', error);
        // Fallback to local generation
        setTimeout(() => {
            const result = generateJobTitle(userData);
            showResult(result);
        }, 1000);
    }
}

/**
 * AWS Lambda function for serverless deployment
 * This can be deployed as a Lambda function to handle the job title generation
 */
const lambdaHandler = async (event) => {
    const headers = {
        'Access-Control-Allow-Origin': '*',
        'Access-Control-Allow-Headers': 'Content-Type',
        'Access-Control-Allow-Methods': 'POST, OPTIONS',
        'Content-Type': 'application/json'
    };
    
    // Handle CORS preflight
    if (event.httpMethod === 'OPTIONS') {
        return {
            statusCode: 200,
            headers,
            body: ''
        };
    }
    
    try {
        const userData = JSON.parse(event.body);
        const result = await generateJobTitleWithBedrock(userData);
        
        return {
            statusCode: 200,
            headers,
            body: JSON.stringify(result)
        };
    } catch (error) {
        console.error('Lambda error:', error);
        return {
            statusCode: 500,
            headers,
            body: JSON.stringify({ error: 'Internal server error' })
        };
    }
};

/**
 * CloudFormation template for AWS deployment
 * Save this as cloudformation-template.yaml
 */
const cloudFormationTemplate = `
AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Desi Cloud Job Title Generator

Resources:
  JobTitleGeneratorFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: lambda.handler
      Runtime: nodejs18.x
      Timeout: 30
      Events:
        Api:
          Type: Api
          Properties:
            Path: /generate
            Method: post
      Environment:
        Variables:
          BEDROCK_REGION: !Ref AWS::Region
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - bedrock:InvokeModel
              Resource: '*'

  JobTitleGeneratorBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub 'desi-cloud-jobs-\${AWS::AccountId}'
      WebsiteConfiguration:
        IndexDocument: index.html
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false

  BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref JobTitleGeneratorBucket
      PolicyDocument:
        Statement:
          - Effect: Allow
            Principal: '*'
            Action: s3:GetObject
            Resource: !Sub '\${JobTitleGeneratorBucket}/*'

Outputs:
  ApiUrl:
    Description: API Gateway endpoint URL
    Value: !Sub 'https://\${ServerlessRestApi}.execute-api.\${AWS::Region}.amazonaws.com/Prod/generate'
  
  WebsiteUrl:
    Description: S3 website URL
    Value: !GetAtt JobTitleGeneratorBucket.WebsiteURL
`;

// Export functions for use in other files
if (typeof module !== 'undefined' && module.exports) {
    module.exports = {
        generateJobTitleWithBedrock,
        handleFormSubmissionWithAWS,
        lambdaHandler,
        cloudFormationTemplate
    };
}
